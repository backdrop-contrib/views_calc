<?php
//$Id$

/**
 * @file
 *  Add simple calculations to a views table
 * 
 *  Install module and go to views_calc settings
 *  Go to Select Views tab of settings and select each view to be made calculations-enabled
 *  Go to Configure Fields tab of settings and select the fields and calculations to be performed
 * 
 *  The calculations are performed only on the current view results
 *  If there are paged results and grand totals are needed it will take addition processing and bandwidth
 *  Also raises question of where to display the grand totals and whether or not to also do sub-totals for each page
 *  Not sure yet what would be the best approach for that, so it is a possible future TODO
 *  Current workaround is not to used paged tables for calculated views 
 *  or set them up so that the items that need to be calculated will be visible on the same page.
 */
 
/**
 * Implementation of hook_help().
 */
function views_calc_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('This module will sum, count, and average rows and columns of numeric data in a views table.');
  }
}

/**
 * Implementation of hook_perm().
 */
function views_calc_perm() {
  return array('create views calc');
}

/**
 * Implementation of hook_access().
 */
function views_calc_access($op, $node) {
  global $user;
  switch ($op) {
    case ('create'):
      return user_access('create views calc');
      break;
  }
}

function views_calc_menu($may_cache) {
  $items = array();
    
  $items[] = array(
    'path' => 'admin/settings/views_calc/main',
    'title' => t('Select Views'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    'priority' => 1,
    'access' => user_access('create views calc')
    );
  $items[] = array('path' => 'admin/settings/views_calc/view',
    'title' => t('Configure Fields'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'priority' => 1,
    'callback' => 'system_site_settings',
    'callback arguments' => array('views_calc'),
    'access' => user_access('create views calc')
    );
  return $items;
}

/**
 *  Implementation of hook_settings()
 */
function views_calc_settings() {

  $views = array();

  $result = db_query("SELECT vid, name, description, use_pager FROM {view_view} ORDER BY description");
  while ($view = db_fetch_object($result)) {
    $views[$view->vid] = $view->name . ($view->use_pager ? ' <span class="error">'. t('[Paged]') .'</span>' : '') . ($view->description ? ' - '. $view->description : '');
  }

  $current = variable_get('views_calc_vid', '');
  // this seems to keep resetting itself so that one view is always selected
  // kludgy workaround keeps it turned off
  $current[0] = 0;

  $form['views_calc']['heading1'] = array(
    '#type' => 'markup',
    '#value' => t('<p>Calculations will only be performed on the visible page of multi-page views. You may want to adjust your view settings to be sure that the values that should be calculated are visible on the same page. </p>'),
    );

  if (arg(3) == '') {

    $form['views_calc']['#type'] = 'fieldset';
    $form['views_calc']['#title'] = t('Available Views');
    $form['views_calc']['views_calc_vid'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Select views to calculation-enable'),
      '#default_value' => $current,
      '#options' => $views,
      '#multiple' => TRUE,
      );

  } else {

    $found = false;
        
    $form['views_calc']['heading2'] = array(
      '#type' => 'markup',
      '#value' => t('<p>Select the fields to calculate for each view that has been calculations-enabled.</p>'),
      );

    foreach ($current as $key => $val) {
      if ($val) {
        $view = views_get_view($val);
        $fields = $view->field; 
        $options = array('' => '');
        foreach ($fields as $key => $field) {
           $options[$field['queryname']] = $field['label'] ? $field['label'] : $field['queryname'];
        }
        $calcs = views_calc_calc_options();
        $form['views_calc'][$val] = array(
          '#type' => 'fieldset',
          '#title' => t('View: '). $views[$val],
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          );
        $form['views_calc'][$val]['views_calc_'.$val.'_row'] = array(
          '#type' => 'select',
          '#title' => t('Fields for row calculation'),
          '#default_value' => variable_get('views_calc_'.$val.'_row', ''),
          '#options' => $options,
          '#multiple' => TRUE,
          '#description' => t('Add a calculation at the end of each row, using these fields.'),
          );
        $form['views_calc'][$val]['views_calc_'.$val.'_row_calc'] = array(
          '#type' => 'select',
          '#title' => t('Calculations to perform on rows'),
          '#default_value' => variable_get('views_calc_'.$val.'_row_calc', ''),
          '#options' => $calcs,
          '#multiple' => TRUE,
          );
        $form['views_calc'][$val]['views_calc_'.$val.'_col'] = array(
          '#type' => 'select',
          '#title' => t('Columns for column calculation'),
          '#default_value' => variable_get('views_calc_'.$val.'_col', ''),
          '#options' => $options,
          '#multiple' => TRUE,
          '#description' => t('Add a calculation at the foot of each these columns.'),
          );
        $form['views_calc'][$val]['views_calc_'.$val.'_col_calc'] = array(
          '#type' => 'select',
          '#title' => t('Calculations to perform on columns'),
          '#default_value' => variable_get('views_calc_'.$val.'_col_calc', ''),
          '#options' => $calcs,
          '#multiple' => TRUE,
          );
        $found = true;
      }
    }
    if (!$found) {
      drupal_set_message(t('You have not yet selected any views to apply calculations to.'), 'error');
    } else {
      $form['views_calc']['#suffix'] = t('<div class="description">Note: <strong>average (all)</strong> will divide the total by the number of all items, <strong>average</strong> will divide the total by the number of items that have a non-zero value.</div>');
    }
  }
  return $form;
      
}

/**
 *  Implementation of views_style_plugins() from views.module
 */
function views_calc_views_style_plugins() {
  return array(
    'calc_table' => array(
      'name' => t('Calc Table View'),
      'theme' => 'views_calc_table',
      'validate' => 'views_ui_plugin_validate_table',
      'needs_fields' => TRUE,
      'needs_table_header' => TRUE,
      ),
    );
}

/**
 *  Implementation of hook_views_pre_view() from views.module
 */
function views_calc_views_pre_view(&$view, &$items) {
  
  $view_calcs = (array) variable_get('views_calc_vid','');
  
  foreach ($view_calcs as $view_calc) {
    
    // trigger only for table views that are calculation-enabled and have an array of items to assess
    // check for num_nodes to make sure view is full view and not just a summary
    if ($view_calc && $view->vid == $view_calc && ($view->page_type == 'table' || $view->page_type == 'calc_table') && $items && !$items[0]->num_nodes) {
      
      // make sure the table gets proper spreadsheet-like themeing
      theme_add_style(drupal_get_path('module', 'views_calc') .'/views_calc.css');
      $view->page_type = 'calc_table';

      if ($view->use_pager && sizeof($items) == $view->nodes_per_page) {
         
         // this is a TODO item
         // if this is only a partial view, may want to get grand totals
         // for now doing nothing and only calculating the visible portion of the view
      }

      // views_calc processing
      views_calc_calc_view($view, $items, $view_calc);

      // this last item doesn't return the view itself, just an optional item to be displayed above the view
      return theme('views_calc', $items, $col_total, $col_count);
    }
  }
}

/**
 *  The calculation alternatives
 */
function views_calc_calc_options() {
  return array('SUM' => 'Sum', 'COUNT' => 'Count', 'AVERAGE' => 'Average', 'AVERAGE_ALL' => 'Average (all)');
}

/**
 *  Views_calc processing
 *  
 *  add a column to the view items array for each row calc
 *  add a row to the view items array for each column calc
 */
function views_calc_calc_view(&$view, &$items, $view_calc) {

  $rows     = (array) variable_get('views_calc_'.$view_calc.'_row','');
  $row_calc = (array) variable_get('views_calc_'.$view_calc.'_row_calc','');
  $cols     = (array) variable_get('views_calc_'.$view_calc.'_col','');
  $col_calc = (array) variable_get('views_calc_'.$view_calc.'_col_calc','');
  $calc_options = (array) views_calc_calc_options();
  
  $row_total = 0;
  $row_count = 0;
  $row_count_filled = 0;
  $col_total = array();
  $col_count = array();
  $col_count_filled = array();

  foreach ($items as $row_no => $row) {
    foreach ($row as $field => $val) {
      if (in_array($field, $cols)) {
        $col_total[$field] += floatval($val);
        $col_count[$field]++;
        if (floatval($val) <> 0) $col_count_filled[$field]++;
      }
      if (in_array($field, $rows)) {
        $row_total += floatval($val);
        $row_count++;
        if (floatval($val) <> 0) $row_count_filled++;
      }
    }
        
    if ($rows && $row_calc) {
      // calculate rows
      // add a new column for each calculation
      foreach ($row as $field => $val) {
        $add = array();
        foreach ($row_calc as $calc) {
          if (in_array($field, $rows)) {
            switch ($calc) {
            case ('COUNT'):
              $add[$calc_options[$calc]] = $row_count;
              break;
            case ('AVERAGE'):
              $add[$calc_options[$calc]] = $row_count_filled > 0 ? round($row_total / $row_count_filled, 2) : 0;
              break;
            case ('AVERAGE_ALL'):
              $add[$calc_options[$calc]] = $row_count > 0 ? round($row_total / $row_count, 2) : 0;
              break;
            default:
              $add[$calc_options[$calc]] = $row_total;
              break;
            }
          }
          $old = (array) $items[$row_no];
          $add = $old + $add;
          $items[$row_no] = (object) $add;
        }
      }
    }
    $row_total = 0;
    $row_count = 0;
    $row_count_filled = 0;
  }
    
  
  // calculate columns
  // add a new row for each calculation
  foreach ($col_calc as $calc) {
    unset($title);
    unset($add);
    foreach ($items[0] as $field => $val) {
      if (!is_numeric($val) && !isset($title) && !in_array($field, $cols)) {

        // find the first available non-numeric column for the title
        $title = $calc_options[$calc];
        $add[$calc_options[$calc]][$field] = $title;
      
      } elseif (in_array($field, $cols)) {
        // this is one of the items being calculated
        switch ($calc) {
        case ('COUNT'):
          $add[$calc_options[$calc]][$field] = $col_count[$field];
          break;
        case ('AVERAGE'):
          $add[$calc_options[$calc]][$field] = $col_count_filled[$field] > 0 ? round(($col_total[$field] / $col_count_filled[$field]), 2) : 0;
          break;
        case ('AVERAGE_ALL'):
          $add[$calc_options[$calc]][$field] = $col_count[$field] > 0 ? round(($col_total[$field] / $col_count[$field]), 2) : 0;
          break;
        default:
          $add[$calc_options[$calc]][$field] = $col_total[$field];
          break;
        }
    
      } elseif (substr($field, -2) == 'id') {
        // id fields need a number so they don't throw a sql error
        $add[$calc_options[$calc]][$field] = 0;
  
      } else {
        // all other columns get a blank value
        $add[$calc_options[$calc]][$field] = '';
      }
    }
    $items[] = (object) $add[$calc_options[$calc]];
  }

  $i = sizeof($view->field);
  foreach ($row_calc as $calc) {

    // add a column to the view for each calculation
    $view->field[] = array(
      'vid' => $view->vid,
      'tablename' => '',
      'field' => $calc_options[$calc],
      'label' => $calc_options[$calc],
      'handler' => '',
      'sortable' => 0,
      'defaultsort' => '',
      'position' => $i,
      'options' => '',
      'fullname' => $calc_options[$calc],
      'id' => $calc_options[$calc],
      'queryname' => $calc_options[$calc],
      );

    // if columns were added, they need to be added to the table header, too
    $view->table_header[] = array(
      'data' => $calc_options[$calc],
      'id' => $calc_options[$calc],
      'class' => 'view-cell-header',
      );
    $i++;
  }
}


/**
 *  Override the views table theme to add more formatting
 *  uses views_calc.css to give more spreadsheet-like appearance
 */
function theme_views_calc_table($view, $nodes) {
  
  $view_calcs = (array) variable_get('views_calc_vid','');
  $cols       = (array) variable_get('views_calc_'.$view->vid.'_col','');
  $col_calc   = (array) variable_get('views_calc_'.$view->vid.'_col_calc','');
  $row_calc   = (array) variable_get('views_calc_'.$view->vid.'_row_calc','');

  $fields     = _views_get_fields();

  // figure out how many rows and columns are calculation rows
  if ($col_calc || $row_calc) {
    $add_cols = $col_calc ? intval(sizeof($col_calc)) : 0;
    $add_rows = $row_calc ? intval(sizeof($row_calc)) : 0;
    $main_rows = intval(intval(sizeof($nodes)) - $add_cols);
    $main_cols = intval(intval(sizeof($view->field)) - $add_rows);
  } else {
    $main_rows = intval(sizeof($nodes));
    $main_cols = intval(sizeof($view->field));
  }

  foreach ($nodes as $delta => $node) {
    $row = array();
    foreach ($view->field as $delta2 => $field) {
      if ($delta >= $main_rows) {
        // format the calculation rows
        if (in_array($field['queryname'], $cols) || !is_numeric($node->$field['queryname'])) {
          $cell['data'] = $node->$field['queryname'] ? $node->$field['queryname'] : '&nbsp;';
        } else {
          $cell['data'] = '&nbsp;';
        }
        // give numeric data its own class
        if (is_numeric($cell['data'])) {
          $cell['class'] = 'view-footer-number';
        } else {
          $cell['class'] = 'view-footer';
        }
        $cell['id'] = "view-field-$field[queryname]-$delta";
      
      } else {
        
        // format the main table rows
        $cell['data'] = theme('views_handle_field', $fields, $field, $node);
        
        // give numeric data its own class
        if (is_numeric($cell['data'])) {
          if ($delta2 >= $main_cols) {
            // format calculation columns
            $cell['class'] = 'view-total-number';
          } else {
            // format main table columns
            $cell['class'] = 'view-field-number';
          }
        } else {
          if ($delta2 >= $main_cols) {
            // format calculation columns
            $cell['class'] = 'view-total';

          } else {
            // format main table columns
            $cell['class'] = 'view-field';
          }
        }
        $cell['id'] = "view-field-$field[queryname]";
      }
      $row[] = $cell;
    }
    $rows[] = $row;
  }
  return theme('table', $view->table_header, $rows);
}


/**
 *  Theme for calc summary above table
 *  could be used to display a message above the results table
 */ 
function theme_views_calc($items,$col_total, $col_count) {
  //$output = '<div>'. t('Table calculations have been performed.') . '</div>';
  //return $output;
}